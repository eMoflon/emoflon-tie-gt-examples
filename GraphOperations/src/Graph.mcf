import "platform:/resource/GraphOperations/model/GraphOperations.ecore"
import "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"

using "Graph.gt"
package src.Graph

class Graph {
  operation addEdgeWithIncidentNodes(srcId : EString, trgId : EString, edgeId : EString) : Edge {
    this: Graph
    srcNode : Node
    trgNode : Node
    if (pNodeExists(nodeId = srcId, graph = this)) {} else {
      invoke pCreateNode(nodeId = srcId, graph = this, newNode = srcNode)
    }

    if (pNodeExists(nodeId = trgId, graph = this)) {} else {
      invoke pCreateNode(nodeId = trgId, graph = this, newNode = trgNode)
    }

    edge : Edge
    n1 : Node
    n2 : Node
    invoke pNodeExists(nodeId = srcId, node = n1, graph = this)
    invoke pNodeExists(nodeId = trgId, node = n2, graph = this)
    invoke createEdge(srcNode = n1, trgNode = n2, edge = edge, edgeId = edgeId)
    return edge
  }

  operation removeEdge(edgeId : EString) : void {
    this : Graph
    // if-condition: We do not care whether the removal succeeded
    if(removeEdge(edgeId = edgeId, graph = this)) {}
  }

  operation clear() : void {
    node : Node
    this : Graph
    for (pNodeExistsRef(node = node, graph = this)) {

      edge : Edge
      for (pOutgoingEdge(node = node, edge = edge)) {
        invoke removeEdgeRef(edge = edge)
      }

      edge2 : Edge
      while (pIncomingEdge(node = node, edge = edge2)) {
        invoke removeEdgeRef(edge = edge2)
      }

      invoke removeNodeRef(node = node)
    }
  }

  operation calculateNodeCount() : EInt {
    this : Graph
    counter : EIntContainer
    x : EInt
    invoke initializeEIntContainer(container = counter)

    for(pNodeExistsRef(graph = this)) {
      //TODO@dgiessing fix me
      // counter.increment()
    }
    //TODO@dgiessing fix me
    // return counter.value
    return 1
  }
  
  operation isNode(element : Element) : EBoolean {
    if(isNodePattern(element = element)) {
      return true
    } else {
      return false
    }
  }
  
  //TODO@dgiessing return null produces 'return "null";' in the java code
//  operation getIsolatedNode() : Node {
//    this : Graph
//    node : Node
//    if(isolatedNode(isolatedNode = node, graph = this)) {
//      //TODO@dgiessing return node
//      return null
//    } 
//    return null
//  }
}
