import "platform:/resource/SokobanLanguage/model/SokobanLanguage.ecore"

pattern anotherSokoban refines oneSokoban{
	otherField:Field{
		-board->board
		-figure->otherSokoban
	}
	otherSokoban: Sokoban
}
condition notAnotherSokoban = forbid anotherSokoban

pattern oneSokoban{
	board:Board
	field:Field{
		-board->board
		-figure->sokoban
	}
	sokoban: Sokoban
}

pattern exactlyOneSokoban refines oneSokoban{
	
} when notAnotherSokoban

pattern oneBlock {
	board:Board
	field:Field{
		-board->board
		-figure->block
	}
	block: Block
}

pattern oneEndField {
	board:Board
	field: Field {
		.endPos == true
		-board->board
	}
}

pattern anOccupiedField {
	fig: Figure

	field: Field {
		-figure -> fig
	}
}

pattern boulderOnEndField()
refines oneEndField, anOccupiedField {
	
	fig: Boulder
	
} when notABlock

condition notABlock = forbid block

pattern block {
	fig:Block
	}
	
pattern countersMatch{
	counter1:EIntContainer
	counter2:EIntContainer{
		.value==counter1.value
	}
}
	
rule initializeEIntContainer() {
	++counter:EIntContainer {
		.value:=0
	}
}