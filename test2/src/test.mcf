import "platform:/plugin/test2/model/Test2.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

using "test.gt"

package src.test

class Box {

	operation removeAllCards(partition:Partition):void{
		this:Box
		card:Card
		while(matchCardInPartition(partition=partition,box=this,card=card)){
			invoke removeCardFromPartition(partition=partition,box=this,card=card)
		}
	}
	
	operation removeAllCardsTail(partition:Partition):void{
		this:Box
		card:Card
		do{
			invoke removeCardFromPartition(partition=partition,box=this,card=card)
		}while(matchCardInPartition(partition=partition,box=this))
	}
	
	
	operation matchAPartition(searchedBoxId:EInt):void{
	    this:Box
	    p:Partition
		invoke matchPartition(b = this ,boxId=searchedBoxId)
	}
	operation removeAPartition(searchedBoxId:EInt):void{
		this:Box
		p:Partition
		invoke removePartition(b = this, p3 = p,boxId=searchedBoxId)
	}

	operation addAPartition():void{
		this:Box
		p:Partition
		p2:Partition
		invoke addPartition(b = this, p2=p)
	}

    /**
     * Set return type in metamodel to test return behavior
     */
	operation insertPartition(predecessorPartition:Partition):void{
		this:Box
		p2:Partition
		invoke insertPartition(b = this, predecessorPartition=predecessorPartition,newPartition=p2)
		//return p2
		/**
		 * Extension with if-else
		 * if(insertPartition(b = this, predecessorPartition=predecessorPartition,newPartition=p2)) {
		 *   return p2
		 * } else {
		 *   return null
		 * }
		 */
	}

}

class Partition {
		operation checkCard(guess:EString, card:Card):void{
			if(checkGuess(card=card,guess=guess)){
				//if(isFastCard(card=card)){
					//invoke promoteFastCard(card=card)
				//}
				//else{
				//	invoke promoteCard(card=card)
				//}
			}else{
				invoke penalizeCard(card=card)
			}
		
	}
	
	operation findCard(s:EString):Card{
		this:Partition
		card:Card
		invoke findCardFace(card=card,guess=s,partition=this)
		return card
		
	}
	
	operation clearAllCards():void{
		this:Partition
		for(clearCard(partition=this)){
			
		}
	}
	
	operation isFastCard(card:Card):EBoolean{
		if(isFastCard(card=card)){
			return 
		}
		else{
			return 
		}
	}
}
