import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/SokobanRules/model/SokobanRules.ecore"


rule initializeCounter {
  ++ counter : Counter {
    .value := 0
  }
}

pattern countersMatch {
  counter1 : Counter
  counter2 : Counter {
    .value == counter1.value
  }
}

rule incrementCounter {
  counter : Counter
  attributeCondition {
    addI(counter.value*, counter.value, 1)
  }
}

attributeConditionLibrary {
  addI (result : EInt, x : EInt, y :EInt) {
    extend [F B B] {
      Java : '$result$ = $x$ + $y$' 
    }
    extend [B F B] {
      Java : '$x$ = $result$ - $y$' 
    }
  }
  mulI (result : EInt, x : EInt, y :EInt) {
    extend [F B B] {
      Java : '$result$ = $x$ * $y$' 
    }
  }
  subI(result : EInt, x : EInt, y :EInt) { 
    extend [F B B] {
      Java : '$result$ = $x$ - $y$' 
    }
  }
}

rule setCounter(value : EInt) {
  counter : Counter {
    .value := param::value
  }
}

rule decrementCounter {
  counter : Counter
  attributeCondition {
    //addI(counter.value, counter.value*, 1)
    subI(counter.value*, counter.value, 1)
  }
}

rule multiplyCounter() {
  counter : Counter
  n : Counter
  attributeCondition {
    mulI(counter.value*, counter.value, n.value)
  }
}

pattern isPositive {
  counter : Counter {
    .value > 0
  }
}
