@GenModel(documentation="TODO: Add documentation for Blup")
@namespace(uri="platform:/plugin/SokobanRules/model/SokobanRules.ecore", prefix="SokobanRules")
package SokobanRules;

@GenModel(documentation="A board stores a grid of fields.")
class Board {
    @GenModel(documentation="Refers to all contained fields.")    
    val Field [*]#board fields;

    @GenModel(documentation="Refers to currently selected figure.")
    ref Figure [0..1] selectedFigure;
    
    @GenModel(documentation="Number of fields per row.")
    attr EInt [1] width;
    
    @GenModel(documentation="Number of fields per column.")
    attr EInt [1] height; 
}

class Field {
    val Figure [0..1]#field figure;

    ref Field [0..1]#right left;
    ref Field [0..1]#left right;        
    ref Field [0..1]#bottom top;
    ref Field [0..1]#top bottom;

    ref Board [1]#fields board;
  
    attr EInt [1] col;
    attr EInt [1] row;
    attr EBoolean [1] endPos = false;
}

abstract class Figure {
    ref Field [1]#figure field;   
}

class Sokoban extends Figure {  
}

class Boulder extends Figure  {  
}

class Block extends Boulder {   
}

@GenModel(documentation="Validates board states and moves")
class SokobanValidator {
    @GenModel(documentation="Returns true if the given Board is valid")
    op EBoolean validateBoard(Board board);
    @GenModel(documentation="Moves the figure to the field if
                             possible and returns true iff the move was possible")        
    op EBoolean move(Figure figure, Field field);        
}

@GenModel(documentation="Holds an integer value ")
class Counter {
	attr EInt[1] value;
    @GenModel(documentation="Increases the 'value' by one")	
	op void increment();
}